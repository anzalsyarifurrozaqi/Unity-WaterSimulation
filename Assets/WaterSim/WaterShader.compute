#pragma kernel GenerateMesh

struct VertexData
{
    float3 positionOS;
    float3 normalOS;
    float2 uv;
};

RWStructuredBuffer<VertexData> _generated_vertices;
RWStructuredBuffer<int> _generated_indices;

int _grid_Size;
int _total_grid_size;
int PosX;
int PosY;

[numthreads(128,1,1)]
void GenerateMesh (uint3 id : SV_DispatchThreadID)
{    
    for (int y = 0; y < _grid_Size; ++y)
    {
        float2 uv           = float2((PosX + id.x) / (_total_grid_size - 1.0f), (PosY + y) / (_total_grid_size - 1.0f));
        float3 pos          = float3(id.x, 0.0f, y);
        float3 norm         = float3(0.0f, 1.0f, 0.0f);

        _generated_vertices[id.x + y * _grid_Size].uv           = uv;
        _generated_vertices[id.x + y * _grid_Size].positionOS   = pos;
        _generated_vertices[id.x + y * _grid_Size].normalOS     = norm;
    }

    if (id.x < _grid_Size - 1)
    {
        int num = id.x * (_grid_Size - 1) * 6;
        for (int y = 0; y < _grid_Size - 1; ++y)    
        {
            _generated_indices[num++]           = id.x + y * _grid_Size;
            _generated_indices[num++]           = id.x + (y + 1) * _grid_Size;
            _generated_indices[num++]           = (id.x + 1) + y * _grid_Size;

            _generated_indices[num++]           = id.x + (y + 1) * _grid_Size;
            _generated_indices[num++]           = (id.x + 1) + (y + 1) * _grid_Size;
            _generated_indices[num++]           = (id.x + 1) + y * _grid_Size;
        }        
    }
}
